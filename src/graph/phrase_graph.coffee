#
# phrase graph
# ============
#
# Container to house all vertexes and edges of the phrase tree
# that is assembled by the phrase recursor's 'first walk'
# 

exports.create = (root) -> 

    return api = 

        #
        # assembler(msg, next)
        # --------------------
        # 
        # Middleware assembles the phrase graph from 'phrase::edge:create'
        # messages generated by the 'first walk'
        #

        assembler: (msg, next) -> 

            if msg.context.title == 'phrase::edge:create'

                api.registerEdge msg, next
            
            else next()

        registerEdge: (msg, next) -> 

            next()

