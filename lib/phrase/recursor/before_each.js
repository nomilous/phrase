// Generated by CoffeeScript 1.6.3
var PhraseLeaf, PhraseNode, sequence;

PhraseNode = require('../../phrase_node');

PhraseLeaf = require('./leaf');

sequence = require('when/sequence');

exports.create = function(root, parentControl) {
  var context, notice, phraseLeaf, stack, util;
  context = root.context, util = root.util;
  stack = context.stack, notice = context.notice;
  phraseLeaf = PhraseLeaf.create(root, parentControl);
  return function(done, injectionControl) {
    var deferral, phrase, phraseControl, phraseFn, phraseText;
    deferral = injectionControl.defer;
    phraseText = typeof injectionControl.args[0] === 'function' ? '' : injectionControl.args[0];
    phraseControl = typeof injectionControl.args[1] === 'function' ? {} : injectionControl.args[1];
    phraseFn = injectionControl.args[2] || injectionControl.args[1] || injectionControl.args[0] || function() {
      return console.log('NO ARGS');
    };
    phraseControl || (phraseControl = {});
    phraseControl.leaf || (phraseControl.leaf = parentControl.leaf);
    phraseControl.timeout || (phraseControl.timeout = parentControl.timeout);
    injectionControl.args[0] = phraseText;
    injectionControl.args[1] = phraseControl;
    injectionControl.args[2] = phraseFn;
    if (phraseControl != null) {
      phraseControl.phraseToken = {
        name: util.argsOf(phraseFn)[0]
      };
    }
    stack.push(phrase = new PhraseNode({
      text: phraseText,
      token: parentControl.phraseToken,
      uuid: stack.length === 0 ? parentControl.phraseToken.uuid : void 0,
      timeout: phraseControl.timeout
    }, console.log('TODO: make these less exposed'), {
      hooks: {
        beforeAll: injectionControl.beforeAll,
        beforeEach: injectionControl.beforeEach,
        afterEach: injectionControl.afterEach,
        afterAll: injectionControl.afterAll
      },
      fn: phraseFn,
      deferral: deferral,
      queue: injectionControl.queue
    }));
    return phraseLeaf.detect(phrase, function(leaf) {
      var run;
      if (leaf) {
        injectionControl.args[2] = function() {};
      }
      run = sequence([
        function() {
          return notice.event('phrase::edge:create', {
            type: 'tree',
            leaf: leaf,
            vertices: stack.slice(-2)
          });
        }, function() {
          if (leaf) {
            return notice.event('phrase::leaf:create', {
              uuid: phrase.uuid,
              path: stack.map(function(p) {
                return p.uuid;
              }),
              convenience: stack.map(function(p) {
                return "/" + p.token.name + "/" + p.text;
              }).join('')
            });
          }
        }
      ]);
      return run.then(function() {
        done();
        if (leaf) {
          return process.nextTick(function() {
            return deferral.resolve();
          });
        }
      });
    });
  };
};
