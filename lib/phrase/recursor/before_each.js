// Generated by CoffeeScript 1.6.3
var PhraseLeaf, PhraseNode;

PhraseNode = require('../../phrase_node');

PhraseLeaf = require('./leaf');

exports.create = function(root, parentControl) {
  var context, control, notice, phraseLeaf, stack, util;
  context = root.context, util = root.util;
  stack = context.stack, notice = context.notice;
  control = parentControl.control;
  phraseLeaf = PhraseLeaf.create(root);
  return function(done, injectionControl) {
    var deferral, phrase, phraseControl, phraseFn, phraseText;
    deferral = injectionControl.defer;
    phraseText = typeof injectionControl.args[0] === 'function' ? {} : injectionControl.args[0];
    phraseControl = typeof injectionControl.args[1] === 'function' ? {} : injectionControl.args[1];
    phraseFn = injectionControl.args[2] || injectionControl.args[1] || injectionControl.args[0] || function() {
      return console.log('NO ARGS');
    };
    injectionControl.args[0] = phraseText;
    injectionControl.args[1] = phraseControl;
    injectionControl.args[2] = phraseFn;
    if (phraseControl != null) {
      phraseControl.phraseToken = {
        name: util.argsOf(phraseFn)[0]
      };
    }
    stack.push(phrase = new PhraseNode({
      text: phraseText,
      token: control.phraseToken,
      hooks: {
        beforeAll: injectionControl.beforeAll,
        beforeEach: injectionControl.beforeEach,
        afterEach: injectionControl.afterEach,
        afterAll: injectionControl.afterAll
      },
      fn: phraseFn,
      deferral: deferral,
      queue: injectionControl.queue
    }));
    return phraseLeaf.detect(phrase, function(leaf) {
      var finished;
      if (leaf) {
        injectionControl.args[2] = function() {};
      }
      finished = function(result_or_error) {
        done();
        if (leaf) {
          return process.nextTick(function() {
            return deferral.resolve();
          });
        }
      };
      return notice.event('phrase::edge:create', {
        type: 'tree',
        leaf: leaf,
        vertices: stack.slice(-2)
      }).then(finished, finished);
    });
  };
};
