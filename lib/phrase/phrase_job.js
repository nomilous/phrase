// Generated by CoffeeScript 1.6.3
var PhraseJob, v1;

v1 = require('node-uuid').v1;

module.exports = PhraseJob = (function() {
  function PhraseJob(opts) {
    var localOpts, property, _fn, _i, _len, _ref,
      _this = this;
    if (opts == null) {
      opts = {};
    }
    opts.uuid || (opts.uuid = v1());
    opts.deferral || (opts.deferral = {
      reject: function(error) {
        throw error;
      },
      notify: function(update) {
        return console.log('PhraseJob:', JSON.stringify(update));
      }
    });
    localOpts = {
      progress: {
        steps: opts.steps != null ? opts.steps.length : 0,
        done: 0
      }
    };
    _ref = ['uuid', 'steps', 'deferral', 'progress'];
    _fn = function(property) {
      return Object.defineProperty(_this, property, {
        enumerable: false,
        get: function() {
          return opts[property] || localOpts[property];
        },
        set: function(value) {
          return opts.deferral.reject(new Error("Cannot assign reserved property: " + property + "(=" + value + ")"));
        }
      });
    };
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      property = _ref[_i];
      _fn(property);
    }
  }

  PhraseJob.prototype.start = function() {
    var step, _i, _len, _ref, _results;
    this.deferral.notify({
      "class": this.constructor.name,
      uuid: this.uuid,
      action: 'start',
      progress: this.progress,
      at: Date.now()
    });
    _ref = this.steps;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      step = _ref[_i];
      _results.push(step.fn.call(this));
    }
    return _results;
  };

  return PhraseJob;

})();
