// Generated by CoffeeScript 1.6.3
var defer, error, map, sequence, _ref;

_ref = require('when'), defer = _ref.defer, map = _ref.map;

sequence = require('when/sequence');

error = function(code, message) {
  return Object.defineProperty(new Error(message), 'code', {
    value: code
  });
};

exports.run = function(root, opts) {
  var context, graph, running, uuid;
  context = root.context;
  graph = context.graph;
  uuid = opts.uuid;
  running = defer();
  process.nextTick(function() {
    var afters, befores, count, leaves, recurse, steps;
    if (uuid == null) {
      return running.reject(error(1, "missing opts.uuid"));
    }
    if (graph.vertices[uuid] == null) {
      return running.reject(error(2, "uuid: '" + uuid + "' not in local tree"));
    }
    leaves = graph.leavesOf(uuid);
    count = leaves.length;
    steps = [];
    befores = {};
    afters = {};
    recurse = function() {
      var inbound, leaf, outbound, path, remaining;
      remaining = leaves.length;
      if (remaining === 0) {
        return;
      }
      leaf = leaves.shift();
      path = graph.tree.leaves[leaf.uuid].path;
      outbound = [];
      inbound = path.map(function(uuid) {
        outbound.unshift(graph.vertices[uuid]);
        return graph.vertices[uuid];
      });
      return sequence([
        function() {
          return map(inbound, function(phrase) {
            var beforeAll, beforeEach, position, _ref1;
            _ref1 = phrase.hooks, beforeAll = _ref1.beforeAll, beforeEach = _ref1.beforeEach;
            if ((beforeAll != null) && (befores[beforeAll.uuid] == null)) {
              position = steps.push({
                type: 'hook',
                ref: beforeAll
              }) - 1;
              befores[beforeAll.uuid] = position;
            }
            if (beforeEach != null) {
              return steps.push({
                type: 'hook',
                ref: beforeEach
              });
            }
          });
        }, function() {
          return steps.push({
            type: 'leaf',
            ref: leaf
          });
        }, function() {
          return map(outbound, function(phrase) {
            var afterAll, afterEach, oldPosition, position, _ref1;
            _ref1 = phrase.hooks, afterEach = _ref1.afterEach, afterAll = _ref1.afterAll;
            if (afterEach != null) {
              steps.push({
                type: 'hook',
                ref: afterEach
              });
            }
            if (afterAll != null) {
              position = steps.push({
                type: 'hook',
                ref: afterAll
              }) - 1;
              if (afters[afterAll.uuid] != null) {
                oldPosition = afters[afterAll.uuid];
                delete steps[oldPosition];
              }
              return afters[afterAll.uuid] = position;
            }
          });
        }
      ]).then(recurse);
    };
    return recurse();
  });
  return running.promise;
};
