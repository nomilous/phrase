// Generated by CoffeeScript 1.6.3
var defer, error, map, sequence, _ref;

_ref = require('when'), defer = _ref.defer, map = _ref.map;

sequence = require('when/sequence');

error = function(code, message) {
  return Object.defineProperty(new Error(message), 'code', {
    value: code
  });
};

exports.run = function(root, opts) {
  var context, graph, running, uuid;
  context = root.context;
  graph = context.graph;
  uuid = opts.uuid;
  running = defer();
  process.nextTick(function() {
    var count, leaves, recurse, results;
    if (uuid == null) {
      return running.reject(error(1, "missing opts.uuid"));
    }
    if (graph.vertices[uuid] == null) {
      return running.reject(error(2, "uuid: '" + uuid + "' not in local tree"));
    }
    leaves = graph.leavesOf(uuid);
    count = leaves.length;
    results = [];
    recurse = function() {
      var inbound, leaf, outbound, path, remaining, state;
      remaining = leaves.length;
      state = remaining === 0 ? 'done' : 'running';
      running.notify({
        timestamp: Date.now(),
        state: state,
        total: count,
        remaining: remaining
      });
      if (remaining === 0) {
        return process.nextTick(function() {
          return running.resolve(results);
        });
      }
      leaf = leaves.shift();
      path = graph.tree.leaves[leaf.uuid].path;
      outbound = [];
      inbound = path.map(function(uuid) {
        outbound.unshift(graph.vertices[uuid]);
        return graph.vertices[uuid];
      });
      return sequence([
        function() {
          return map(inbound, function(phrase) {
            if (remaining === count) {
              console.log({
                beforeAll: phrase.hooks.beforeAll
              });
            }
            return console.log({
              beforeEach: phrase.hooks.beforeEach
            });
          });
        }, function() {
          return console.log({
            RUN_LEAF: leaf.text
          });
        }, function() {
          return map(outbound, function(phrase) {
            console.log({
              afterEach: phrase.hooks.afterEach
            });
            if (leaves.length === 0) {
              return console.log({
                afterAll: phrase.hooks.afterAll
              });
            }
          });
        }
      ]).then(recurse);
    };
    return recurse();
  });
  return running.promise;
};
