// Generated by CoffeeScript 1.6.3
var api, defer, error, pipeline;

defer = require('when').defer;

pipeline = require('when/pipeline');

error = function(code, message) {
  return Object.defineProperty(new Error(message), 'code', {
    value: code
  });
};

api = {
  run: function(root, opts) {
    var context, graph, running, uuid;
    context = root.context;
    graph = context.graph;
    uuid = opts.uuid;
    running = defer();
    process.nextTick(function() {
      if (uuid == null) {
        return running.reject(error(1, "missing opts.uuid"));
      }
      if (graph.vertices[uuid] == null) {
        return running.reject(error(2, "uuid: '" + uuid + "' not in local tree"));
      }
    });
    pipeline([
      function() {
        return api.getSteps(root, opts, running);
      }, function(steps) {
        var job;
        job = new context.PhraseJob({
          steps: steps,
          deferral: running
        });
        return job.run();
      }
    ]).then(function(result) {
      return running.resolve(result);
    }, function(error) {
      return running.reject(error);
    }, function(update) {
      return running.notify(update);
    });
    return running.promise;
  },
  getSteps: function(root, opts, running) {
    var afters, befores, context, count, getting, graph, leaves, recurse, start, steps, uuid;
    context = root.context;
    graph = context.graph;
    uuid = opts.uuid;
    getting = defer();
    leaves = graph.leavesOf(uuid);
    count = leaves.length;
    steps = [];
    befores = {};
    afters = {};
    start = recurse = function() {
      var inbound, leaf, outbound, path, remaining;
      remaining = leaves.length;
      if (remaining === 0) {
        steps = steps.filter(function(s) {
          return s != null;
        });
        running.notify({
          state: 'scan::complete',
          at: Date.now(),
          steps: steps.length,
          leaves: count
        });
        return getting.resolve(steps);
      }
      leaf = leaves.shift();
      path = graph.tree.leaves[leaf.uuid].path;
      outbound = [];
      inbound = path.map(function(uuid) {
        outbound.unshift(graph.vertices[uuid]);
        return graph.vertices[uuid];
      });
      inbound.map(function(phrase) {
        var beforeAll, beforeEach, position, _ref;
        _ref = phrase.hooks, beforeAll = _ref.beforeAll, beforeEach = _ref.beforeEach;
        if ((beforeAll != null) && (befores[beforeAll.uuid] == null)) {
          position = steps.push({
            type: 'hook',
            ref: beforeAll
          }) - 1;
          befores[beforeAll.uuid] = position;
        }
        if (beforeEach != null) {
          return steps.push({
            type: 'hook',
            ref: beforeEach
          });
        }
      });
      steps.push({
        type: 'leaf',
        ref: leaf
      });
      outbound.map(function(phrase) {
        var afterAll, afterEach, oldPosition, position, _ref;
        _ref = phrase.hooks, afterEach = _ref.afterEach, afterAll = _ref.afterAll;
        if (afterEach != null) {
          steps.push({
            type: 'hook',
            ref: afterEach
          });
        }
        if (afterAll != null) {
          position = steps.push({
            type: 'hook',
            ref: afterAll
          }) - 1;
          if (afters[afterAll.uuid] != null) {
            oldPosition = afters[afterAll.uuid];
            delete steps[oldPosition];
          }
          return afters[afterAll.uuid] = position;
        }
      });
      return recurse();
    };
    running.notify({
      state: 'scan::starting',
      at: Date.now()
    });
    start();
    return getting.promise;
  }
};

module.exports = api;
