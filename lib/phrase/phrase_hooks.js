// Generated by CoffeeScript 1.6.3
var PhraseHook, afterHooks, beforeHooks;

exports.PhraseHook = PhraseHook = (function() {
  function PhraseHook(fn) {
    this.fn = fn;
    this.createdAt = Date.now();
    this.runCount = 0;
  }

  return PhraseHook;

})();

beforeHooks = {
  each: [],
  all: []
};

afterHooks = {
  each: [],
  all: []
};

Object.defineProperty(global, 'before', {
  enumerable: false,
  get: function() {
    return function(opts) {
      if (opts == null) {
        opts = {};
      }
      if (typeof opts.each === 'function') {
        beforeHooks.each.push(new PhraseHook(opts.each));
      }
      if (typeof opts.all === 'function') {
        return beforeHooks.all.push(new PhraseHook(opts.all));
      }
    };
  }
});

Object.defineProperty(global, 'after', {
  enumerable: false,
  get: function() {
    return function(opts) {
      if (opts == null) {
        opts = {};
      }
      if (typeof opts.each === 'function') {
        afterHooks.each.push(new PhraseHook(opts.each));
      }
      if (typeof opts.all === 'function') {
        return afterHooks.all.push(new PhraseHook(opts.all));
      }
    };
  }
});

exports.bind = function(root) {
  return {
    beforeAll: beforeHooks.all,
    beforeEach: beforeHooks.each,
    afterEach: afterHooks.each,
    afterAll: afterHooks.all
  };
};
