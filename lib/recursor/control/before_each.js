// Generated by CoffeeScript 1.6.3
var sequence;

sequence = require('when/sequence');

exports.create = function(root, parentControl) {
  var PhraseNode, context, notice, stack, util;
  context = root.context, util = root.util;
  stack = context.stack, notice = context.notice, PhraseNode = context.PhraseNode;
  return function(done, injectionControl) {
    var deferral, error, phrase, phraseControl, phraseFn, phraseText, uuid;
    deferral = injectionControl.defer;
    phraseText = typeof injectionControl.args[0] === 'function' ? '' : injectionControl.args[0];
    phraseControl = typeof injectionControl.args[1] === 'function' ? {} : injectionControl.args[1];
    phraseFn = injectionControl.args[2] || injectionControl.args[1] || injectionControl.args[0] || function() {
      return console.log('NO ARGS');
    };
    phraseControl || (phraseControl = {});
    phraseControl.leaf || (phraseControl.leaf = parentControl.leaf);
    phraseControl.timeout || (phraseControl.timeout = parentControl.timeout);
    injectionControl.args[0] = phraseText;
    injectionControl.args[1] = phraseControl;
    injectionControl.args[2] = phraseFn;
    if (phraseControl != null) {
      phraseControl.phraseToken = {
        name: util.argsOf(phraseFn)[0]
      };
    }
    if (stack.length === 0) {
      uuid = parentControl.phraseToken.uuid;
    } else {
      uuid = phraseControl.uuid;
    }
    try {
      stack.push(phrase = new PhraseNode({
        text: phraseText,
        token: parentControl.phraseToken,
        uuid: uuid,
        timeout: phraseControl.timeout,
        hooks: {
          beforeAll: injectionControl.beforeAll,
          beforeEach: injectionControl.beforeEach,
          afterEach: injectionControl.afterEach,
          afterAll: injectionControl.afterAll
        },
        fn: phraseFn,
        deferral: deferral,
        queue: injectionControl.queue
      }));
    } catch (_error) {
      error = _error;
      done(error);
    }
    return parentControl.detectLeaf(phrase, function(leaf) {
      var run;
      if (leaf) {
        injectionControl.args[2] = function() {};
      }
      run = sequence([
        function() {
          return notice.event('phrase::edge:create', {
            type: 'tree',
            leaf: leaf,
            vertices: stack.slice(-2)
          });
        }
      ]);
      return run.then(function() {
        done();
        if (leaf) {
          return process.nextTick(function() {
            return deferral.resolve();
          });
        }
      });
    });
  };
};
