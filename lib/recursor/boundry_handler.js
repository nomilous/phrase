// Generated by CoffeeScript 1.6.3
var boundryHandler, defer, join, readdirSync;

readdirSync = require('fs').readdirSync;

join = require('path').join;

defer = require('when').defer;

module.exports = boundryHandler = {
  link: function(root, opts) {
    console.log(opts);
    if (opts.directory != null) {
      return boundryHandler.linkDirectory(root, opts);
    }
  },
  linkDirectory: function(root, opts) {
    var makeLinks, regex;
    makeLinks = defer();
    if (opts.match != null) {
      regex = new RegExp(opts.match);
    } else {
      regex = new RegExp('\\.coffee$');
    }
    process.nextTick(function() {
      var error, filename, _i, _len, _ref;
      try {
        _ref = boundryHandler.recurse(opts.directory, regex);
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          filename = _ref[_i];
          root.context.stack.push({});
          console.log(filename.slice(60));
          root.context.stack.pop();
        }
      } catch (_error) {
        error = _error;
        makeLinks.reject(error);
      }
      return makeLinks.resolve();
    });
    return makeLinks.promise;
  },
  recurse: function(path, regex, matches) {
    var error, fileOrDirname, nextPath, _i, _len, _ref;
    if (matches == null) {
      matches = [];
    }
    _ref = readdirSync(path);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      fileOrDirname = _ref[_i];
      nextPath = join(path, fileOrDirname);
      try {
        boundryHandler.recurse(nextPath, regex, matches);
      } catch (_error) {
        error = _error;
        if (error.code !== 'ENOTDIR') {
          throw error;
        }
        if (nextPath == null) {
          throw error;
        }
        if (nextPath.match(regex)) {
          matches.push(nextPath);
        }
      }
    }
    return matches;
  }
};
