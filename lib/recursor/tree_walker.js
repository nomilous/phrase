// Generated by CoffeeScript 1.6.3
var Control, PhraseHook, PhraseTokenFactory;

Control = require('../recursor/control');

PhraseHook = require('../phrase/hook');

PhraseTokenFactory = require('../token/phrase_token');

exports.walk = function(root, opts, rootString, rootFn) {
  var PhraseGraph, context, graph, inject, injector, notice, recursor, stack, util;
  context = root.context, inject = root.inject, util = root.util;
  stack = context.stack, notice = context.notice, graph = context.graph, PhraseGraph = context.PhraseGraph;
  context.hooks = PhraseHook.bind(root);
  context.PhraseToken = PhraseTokenFactory.createClass(root);
  if (graph != null) {
    new PhraseGraph;
  } else {
    context.graph = new PhraseGraph;
  }
  recursor = function(parentPhraseString, parentPhraseControl) {
    var recursionControl;
    recursionControl = Control.bindControl(root, parentPhraseControl);
    return inject.async({
      parallel: false,
      beforeAll: recursionControl.beforeAll,
      beforeEach: recursionControl.beforeEach,
      afterEach: recursionControl.afterEach,
      afterAll: recursionControl.afterAll,
      onError: function(done, injectionControl, error) {
        return root.context.token.emit('error', error);
      }
    }, function(phraseString, phraseControl, nestedPhraseFn) {
      var args, newRecursorFn;
      args = util.argsOf(nestedPhraseFn);
      if (args.length > 1) {
        console.log({
          "\nThis may prove trickier than i thought...\n-----------------------------------------\n\n* is this available in the job run?\n* if not, make it so\n* once so, ...\n\n      How to get it into context?\n      Because the vertex phrases \n      are not run at jobtime. \n\n      UM...\n\n": args
        });
      }
      newRecursorFn = recursor(phraseString, phraseControl);
      return nestedPhraseFn(newRecursorFn);
    });
  };
  injector = recursor('ROOT', {
    phraseToken: {
      signature: opts.title,
      uuid: opts.uuid
    },
    timeout: opts.timeout,
    boundry: opts.boundry,
    leaf: opts.leaf
  });
  return injector(rootString, rootFn);
};
