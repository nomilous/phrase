// Generated by CoffeeScript 1.6.3
var v1;

v1 = require('node-uuid').v1;

exports.createClass = function(root) {
  var PhraseGraphChangeSet, changeSets;
  changeSets = {};
  PhraseGraphChangeSet = (function() {
    function PhraseGraphChangeSet(graphA, graphB) {
      var changes, newGraph, newUUID, newVertex, parentPath, path, runningGraph, runningUUID, runningVertex, uuid, vertex, _base, _base1, _base2, _base3, _base4, _base5, _base6, _base7;
      this.graphA = graphA;
      this.graphB = graphB;
      this.uuid = v1();
      this.changes = {
        uuid: this.uuid
      };
      changeSets[this.uuid] = this;
      runningGraph = this.graphA;
      newGraph = this.graphB;
      for (path in runningGraph.path2uuid) {
        runningUUID = runningGraph.path2uuid[path];
        runningVertex = runningGraph.vertices[runningUUID];
        newUUID = newGraph.path2uuid[path];
        if (newUUID == null) {
          (_base = this.changes).deleted || (_base.deleted = {});
          this.changes.deleted[path] = runningVertex;
          continue;
        }
        newVertex = newGraph.vertices[newUUID];
        if (changes = runningVertex.getChanges(newVertex)) {
          if (changes.fn != null) {
            if (runningVertex.leaf) {
              (_base1 = this.changes).updated || (_base1.updated = {});
              (_base2 = this.changes.updated)[path] || (_base2[path] = {});
              this.changes.updated[path].fn = changes.fn;
            }
          }
          if (changes.timeout != null) {
            (_base3 = this.changes).updated || (_base3.updated = {});
            (_base4 = this.changes.updated)[path] || (_base4[path] = {});
            this.changes.updated[path].timeout = changes.timeout;
          }
          if (changes.hooks != null) {
            parentPath = path.split('/').slice(0, -2).join('/');
            (_base5 = this.changes).updated || (_base5.updated = {});
            (_base6 = this.changes.updated)[parentPath] || (_base6[parentPath] = {});
            this.changes.updated[parentPath].hooks = changes.hooks;
            this.changes.updated[parentPath].target = changes.target;
          }
        }
      }
      for (path in newGraph.path2uuid) {
        if (runningGraph.path2uuid[path] == null) {
          uuid = newGraph.path2uuid[path];
          vertex = newGraph.vertices[uuid];
          (_base7 = this.changes).created || (_base7.created = {});
          this.changes.created[path] = vertex;
          continue;
        }
      }
    }

    PhraseGraphChangeSet.prototype.AtoB = function() {
      var child, childUUID, hook, newHook, parent, parentUUID, path, stillParent, target, type, uuid, _i, _len, _ref, _results;
      if (this.changes.deleted != null) {
        for (path in this.changes.deleted) {
          uuid = this.graphA.path2uuid[path];
          delete this.graphA.vertices[uuid];
          delete this.graphA.path2uuid[path];
          delete this.graphA.uuid2path[uuid];
        }
      }
      if (this.changes.created != null) {
        for (path in this.changes.created) {
          uuid = this.changes.created[path].uuid;
          this.graphA.vertices[uuid] = this.changes.created[path];
          this.graphA.path2uuid[path] = this.changes.created[path].uuid;
          this.graphA.uuid2path[uuid] = path;
        }
      }
      stillParent = {};
      for (parentUUID in this.graphB.children) {
        parent = this.graphA.path2uuid[this.graphB.uuid2path[parentUUID]] || parentUUID;
        this.graphA.children[parent] = [];
        if (!this.graphB.vertices[parentUUID].leaf) {
          stillParent[parent] = true;
        }
        _ref = this.graphB.children[parentUUID];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          childUUID = _ref[_i];
          child = this.graphA.path2uuid[this.graphB.uuid2path[childUUID]] || childUUID;
          this.graphA.children[parent].push(child);
        }
      }
      for (parentUUID in this.graphA.children) {
        if (!stillParent[parentUUID]) {
          delete this.graphA.children[parentUUID];
        }
      }
      if (this.changes.updated != null) {
        _results = [];
        for (path in this.changes.updated) {
          target = this.graphA.vertices[this.graphA.path2uuid[path]];
          target.update(this.changes.updated[path]);
          if (this.changes.updated[path].hooks != null) {
            _results.push((function() {
              var _j, _len1, _ref1, _results1;
              _ref1 = ['beforeAll', 'beforeEach', 'afterEach', 'afterAll'];
              _results1 = [];
              for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
                type = _ref1[_j];
                hook = this.changes.updated[path].hooks[type];
                if ((hook != null) && !((hook.fn.from != null) || (hook.timeout.from != null))) {
                  newHook = new root.context.PhraseNode.PhraseHook({
                    timeout: hook.timeout.to,
                    fn: hook.fn.to
                  });
                  parentUUID = this.graphA.path2uuid[path];
                  _results1.push((function() {
                    var _k, _len2, _ref2, _results2;
                    _ref2 = this.graphA.children[parentUUID];
                    _results2 = [];
                    for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
                      childUUID = _ref2[_k];
                      _results2.push(this.graphA.vertices[childUUID].hooks[type] = newHook);
                    }
                    return _results2;
                  }).call(this));
                } else {
                  _results1.push(void 0);
                }
              }
              return _results1;
            }).call(this));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      }
    };

    return PhraseGraphChangeSet;

  })();
  return Object.defineProperty(PhraseGraphChangeSet, 'applyChanges', {
    enumarable: true,
    get: function() {
      return function(uuid, direction) {
        var changeSet;
        changeSet = changeSets[uuid];
        return changeSet[direction || 'AtoB']();
      };
    }
  });
};
