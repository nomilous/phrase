// Generated by CoffeeScript 1.6.3
var defer, seq, v1;

v1 = require('node-uuid').v1;

seq = 0;

defer = require('when').defer;

exports.createClass = function(root) {
  var PhraseGraph, assembler, context, graphs, notice;
  context = root.context;
  notice = context.notice;
  context.graphs = graphs = {
    latest: null,
    list: {}
  };
  notice.use(assembler = function(msg, next) {
    if (graphs.latest == null) {
      return next();
    }
    switch (msg.context.title) {
      case 'phrase::recurse:start':
        return next();
      case 'phrase::edge:create':
        return graphs.latest.registerEdge(msg, next);
      case 'phrase::leaf:create':
        return graphs.latest.registerLeaf(msg, next);
      case 'phrase::recurse:end':
        return graphs.latest.createIndexes(msg, next);
      default:
        return next();
    }
  });
  PhraseGraph = (function() {
    function PhraseGraph(opts) {
      var localOpts, property, _fn, _i, _len, _ref,
        _this = this;
      if (opts == null) {
        opts = {};
      }
      localOpts = {
        uuid: opts.uuid || v1(),
        version: opts.version || ++seq,
        vertices: {},
        edges: {},
        paths: {},
        parent: {},
        children: {},
        leaves: [],
        tree: {
          leaves: {}
        }
      };
      graphs.list[localOpts.uuid] = this;
      graphs.latest = this;
      _ref = ['uuid', 'version', 'vertices', 'edges', 'paths', 'parent', 'children', 'leaves', 'tree'];
      _fn = function(property) {
        return Object.defineProperty(_this, property, {
          get: function() {
            return localOpts[property];
          },
          enumerable: true
        });
      };
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        property = _ref[_i];
        _fn(property);
      }
    }

    PhraseGraph.prototype.createIndexes = function(msg, next) {
      var recurse,
        _this = this;
      if (!(this.leaves.length > 0)) {
        return next();
      }
      msg.tokens = {};
      recurse = function(vertex, stack) {
        var path, text, tokenName, uuid, _i, _len, _ref;
        if (stack == null) {
          stack = [];
        }
        tokenName = vertex.token.name;
        text = vertex.text;
        stack.push("/" + tokenName + "/" + text);
        path = stack.join('');
        _this.paths[path] = vertex.uuid;
        msg.tokens[path] = vertex.token;
        if (_this.children[vertex.uuid] != null) {
          _ref = _this.children[vertex.uuid];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            uuid = _ref[_i];
            recurse(_this.vertices[uuid], stack);
          }
        }
        return stack.pop();
      };
      recurse(this.vertices[this.tree.leaves[this.leaves[0]].path[0]]);
      return next();
    };

    PhraseGraph.prototype.update = function() {
      var changes, create, created, deleted, deletes, doing, newGraph, newUUID, path, runningGraph, runningUUID, runningVertex, update, updated, uuid, vertex, _i, _j, _k, _len, _len1, _len2;
      doing = defer();
      created = [];
      updated = [];
      deleted = [];
      runningGraph = context.graph;
      newGraph = context.graphs.latest;
      for (path in runningGraph.paths) {
        runningUUID = runningGraph.paths[path];
        runningVertex = runningGraph.vertices[runningUUID];
        newUUID = newGraph.paths[path];
        if (newUUID == null) {
          deleted.push({
            vertex: runningVertex,
            path: path
          });
          continue;
        }
        if (runningVertex.leaf) {
          if (changes = runningVertex.getChanges(newGraph.vertices[newUUID])) {
            console.log({
              CHANGED: changes
            });
          }
        }
      }
      for (path in newGraph.paths) {
        if (runningGraph.paths[path] == null) {
          uuid = newGraph.paths[path];
          vertex = newGraph.vertices[uuid];
          created.push({
            vertex: vertex,
            path: path
          });
          continue;
        }
      }
      for (_i = 0, _len = created.length; _i < _len; _i++) {
        create = created[_i];
        console.log('\nCREATED');
        console.log(create.path);
        console.log(create.vertex.fn.toString());
      }
      for (_j = 0, _len1 = updated.length; _j < _len1; _j++) {
        update = updated[_j];
        console.log('\nUPDATED');
        console.log(update.path);
        console.log(update.vertex.fn.toString());
      }
      for (_k = 0, _len2 = deleted.length; _k < _len2; _k++) {
        deletes = deleted[_k];
        console.log('\nDELETED');
        console.log(deletes.path);
        console.log(deletes.vertex.fn.toString());
      }
      return doing.promise;
    };

    PhraseGraph.prototype.registerEdge = function(msg, next) {
      var vertex1, vertex2, _base, _base1, _base2, _name, _name1, _name2, _ref;
      _ref = msg.vertices, vertex1 = _ref[0], vertex2 = _ref[1];
      this.vertices[vertex1.uuid] = vertex1;
      if (vertex2 == null) {
        return next();
      }
      this.vertices[vertex2.uuid] = vertex2;
      (_base = this.edges)[_name = vertex1.uuid] || (_base[_name] = []);
      this.edges[vertex1.uuid].push({
        to: vertex2.uuid
      });
      (_base1 = this.edges)[_name1 = vertex2.uuid] || (_base1[_name1] = []);
      this.edges[vertex2.uuid].push({
        to: vertex1.uuid
      });
      if (msg.type === 'tree') {
        (_base2 = this.children)[_name2 = vertex1.uuid] || (_base2[_name2] = []);
        this.children[vertex1.uuid].push(vertex2.uuid);
        this.parent[vertex2.uuid] = vertex1.uuid;
        if (vertex2.leaf) {
          this.leaves.push(vertex2.uuid);
        }
      }
      return next();
    };

    PhraseGraph.prototype.leavesOf = function(uuid, found) {
      var child_uuid, _i, _len, _ref;
      if (found == null) {
        found = [];
      }
      if (this.vertices[uuid] == null) {
        return found;
      }
      if (this.vertices[uuid].leaf) {
        found.push(this.vertices[uuid]);
        return found;
      }
      _ref = this.children[uuid];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        child_uuid = _ref[_i];
        this.leavesOf(child_uuid, found);
      }
      return found;
    };

    PhraseGraph.prototype.registerLeaf = function(msg, next) {
      this.tree.leaves[msg.uuid] = msg;
      return next();
    };

    return PhraseGraph;

  })();
  Object.defineProperty(PhraseGraph, 'assembler', {
    enumerable: false,
    get: function() {
      return assembler;
    }
  });
  return PhraseGraph;
};
