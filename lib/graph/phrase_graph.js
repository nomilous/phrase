// Generated by CoffeeScript 1.6.3
var v1;

v1 = require('node-uuid').v1;

exports.createClass = function(root) {
  var PhraseGraph, context, notice;
  context = root.context;
  notice = context.notice;
  return PhraseGraph = (function() {
    function PhraseGraph(opts) {
      var localOpts, property, _fn, _i, _len, _ref,
        _this = this;
      if (opts == null) {
        opts = {};
      }
      localOpts = {
        uuid: opts.uuid || v1(),
        vertices: {},
        edges: {}
      };
      _ref = ['uuid', 'vertices', 'edges'];
      _fn = function(property) {
        return Object.defineProperty(_this, property, {
          get: function() {
            return localOpts[property];
          },
          enumerable: true
        });
      };
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        property = _ref[_i];
        _fn(property);
      }
    }

    return PhraseGraph;

  })();
};

exports.create = function(root) {
  var api, children, context, edges, leaves, notice, parent, tree, vertices;
  context = root.context;
  notice = context.notice;
  vertices = {};
  edges = {};
  parent = {};
  children = {};
  leaves = [];
  tree = {
    leaves: {}
  };
  api = {
    leavesOf: function(uuid, found) {
      var child_uuid, _i, _len, _ref;
      if (found == null) {
        found = [];
      }
      if (vertices[uuid] == null) {
        return found;
      }
      if (vertices[uuid].leaf) {
        found.push(vertices[uuid]);
        return found;
      }
      _ref = children[uuid];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        child_uuid = _ref[_i];
        api.leavesOf(child_uuid, found);
      }
      return found;
    }
  };
  Object.defineProperty(api, 'vertices', {
    enumerable: true,
    get: function() {
      return vertices;
    }
  });
  Object.defineProperty(api, 'edges', {
    enumerable: true,
    get: function() {
      return edges;
    }
  });
  Object.defineProperty(api, 'assembler', {
    enumerable: false,
    get: function() {
      return function(msg, next) {
        if (msg.context.title === 'phrase::edge:create') {
          return api.registerEdge(msg, next);
        } else if (msg.context.title === 'phrase::leaf:create') {
          return api.registerLeaf(msg, next);
        } else {
          return next();
        }
      };
    }
  });
  notice.use(api.assembler);
  Object.defineProperty(api, 'registerEdge', {
    enumerable: false,
    get: function() {
      return function(msg, next) {
        var vertex1, vertex2, _name, _name1, _name2, _ref;
        _ref = msg.vertices, vertex1 = _ref[0], vertex2 = _ref[1];
        if (!vertex2) {
          return next();
        }
        vertices[vertex1.uuid] = vertex1;
        vertices[vertex2.uuid] = vertex2;
        edges[_name = vertex1.uuid] || (edges[_name] = []);
        edges[vertex1.uuid].push({
          connect: vertex2.uuid
        });
        edges[_name1 = vertex2.uuid] || (edges[_name1] = []);
        edges[vertex2.uuid].push({
          connect: vertex1.uuid
        });
        if (msg.type === 'tree') {
          parent[vertex2.uuid] = vertex1.uuid;
          children[_name2 = vertex1.uuid] || (children[_name2] = []);
          children[vertex1.uuid].push(vertex2.uuid);
          if (vertex2.leaf) {
            leaves.push(vertex2.uuid);
          }
        }
        return next();
      };
    }
  });
  Object.defineProperty(api, 'registerLeaf', {
    enumerable: false,
    get: function() {
      return function(msg, next) {
        tree.leaves[msg.uuid] = msg;
        return next();
      };
    }
  });
  Object.defineProperty(api, 'parent', {
    enumerable: true,
    get: function() {
      return parent;
    }
  });
  Object.defineProperty(api, 'children', {
    enumerable: true,
    get: function() {
      return children;
    }
  });
  Object.defineProperty(api, 'leaves', {
    enumerable: true,
    get: function() {
      return leaves;
    }
  });
  return Object.defineProperty(api, 'tree', {
    enumerable: true,
    get: function() {
      return tree;
    }
  });
};
