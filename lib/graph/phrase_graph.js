// Generated by CoffeeScript 1.6.3
var v1;

v1 = require('node-uuid').v1;

exports.createClass = function(root) {
  var PhraseGraph, assembler, context, graphs, notice;
  context = root.context;
  notice = context.notice;
  context.graphs = graphs = {
    latest: null,
    list: {}
  };
  notice.use(assembler = function(msg, next) {
    if (graphs.latest == null) {
      return next();
    }
    switch (msg.context.title) {
      case 'phrase::edge:create':
        return graphs.latest.registerEdge(msg, next);
      case 'phrase::leaf:create':
        return graphs.latest.registerLeaf(msg, next);
      default:
        return next();
    }
  });
  PhraseGraph = (function() {
    function PhraseGraph(opts) {
      var localOpts, property, _fn, _i, _len, _ref,
        _this = this;
      if (opts == null) {
        opts = {};
      }
      localOpts = {
        uuid: opts.uuid || v1(),
        vertices: {},
        edges: {},
        parent: {},
        children: {},
        leaves: [],
        tree: {
          leaves: {}
        }
      };
      graphs.list[localOpts.uuid] = this;
      graphs.latest = this;
      _ref = ['uuid', 'vertices', 'edges', 'parent', 'children', 'leaves', 'tree'];
      _fn = function(property) {
        return Object.defineProperty(_this, property, {
          get: function() {
            return localOpts[property];
          },
          enumerable: true
        });
      };
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        property = _ref[_i];
        _fn(property);
      }
    }

    PhraseGraph.prototype.registerEdge = function(msg, next) {
      var vertex1, vertex2, _base, _base1, _base2, _name, _name1, _name2, _ref;
      _ref = msg.vertices, vertex1 = _ref[0], vertex2 = _ref[1];
      if (vertex2 == null) {
        return next();
      }
      this.vertices[vertex1.uuid] = vertex1;
      this.vertices[vertex2.uuid] = vertex2;
      (_base = this.edges)[_name = vertex1.uuid] || (_base[_name] = []);
      this.edges[vertex1.uuid].push({
        to: vertex2.uuid
      });
      (_base1 = this.edges)[_name1 = vertex2.uuid] || (_base1[_name1] = []);
      this.edges[vertex2.uuid].push({
        to: vertex1.uuid
      });
      if (msg.type === 'tree') {
        (_base2 = this.children)[_name2 = vertex1.uuid] || (_base2[_name2] = []);
        this.children[vertex1.uuid].push(vertex2.uuid);
        this.parent[vertex2.uuid] = vertex1.uuid;
        if (vertex2.leaf) {
          this.leaves.push(vertex2.uuid);
        }
      }
      return next();
    };

    PhraseGraph.prototype.leavesOf = function(uuid, found) {
      var child_uuid, _i, _len, _ref;
      if (found == null) {
        found = [];
      }
      if (this.vertices[uuid] == null) {
        return found;
      }
      if (this.vertices[uuid].leaf) {
        found.push(this.vertices[uuid]);
        return found;
      }
      _ref = this.children[uuid];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        child_uuid = _ref[_i];
        this.leavesOf(child_uuid, found);
      }
      return found;
    };

    PhraseGraph.prototype.registerLeaf = function(msg, next) {
      this.tree.leaves[msg.uuid] = msg;
      return next();
    };

    return PhraseGraph;

  })();
  Object.defineProperty(PhraseGraph, 'assembler', {
    enumerable: false,
    get: function() {
      return assembler;
    }
  });
  return PhraseGraph;
};
