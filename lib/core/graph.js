// Generated by CoffeeScript 1.6.3
var Notice, PhraseNode, PhraseTree, TreeWalker;

Notice = require('notice');

PhraseNode = require('../phrase/node');

PhraseTree = require('../phrase/tree');

TreeWalker = require('../recursor/tree_walker');

module.exports.create = function(core) {
  var util;
  util = core.util;
  return core.assembler = function(msg, next) {
    var assemblyOpts, newPhraseControl, newPhraseFn, newPhraseTitle, newPhraseUUID, newRoot, opts, srcControl, srcPhrase, srcRoot;
    if (msg.context.title !== 'boundry::edge:create') {
      return next();
    }
    srcPhrase = msg.vertices[0];
    srcControl = msg.control;
    srcRoot = msg.root;
    newPhraseTitle = msg.vertices[1].phrase.title;
    newPhraseControl = msg.vertices[1].phrase.control;
    newPhraseUUID = msg.vertices[1].phrase.control.uuid || util.uuid();
    newPhraseFn = msg.vertices[1].phrase.fn;
    assemblyOpts = msg.vertices[1].opts;
    newRoot = core.root(newPhraseUUID);
    newRoot.context = {};
    newRoot.context.notice = Notice.create(newPhraseUUID);
    newRoot.context.PhraseTree = PhraseTree.createClass(newRoot);
    newRoot.context.PhraseNode = PhraseNode.createClass(newRoot);
    opts = {
      title: srcControl.phraseToken.signature,
      uuid: newPhraseUUID,
      leaf: newPhraseControl.leaf || srcControl.leaf,
      boundry: newPhraseControl.boundry || srcControl.boundry,
      timeout: newPhraseControl.timeout || srcControl.timeout
    };
    newRoot.context.notice.use(function(msg, next) {
      var path;
      if (msg.context.title === 'phrase::recurse:end') {
        console.log('\nREFERRED TREE:', newPhraseTitle);
        for (path in msg.tokens) {
          console.log(path);
        }
      }
      return next();
    });
    return TreeWalker.walk(newRoot, opts, newPhraseTitle, newPhraseFn).then(function(resolve) {
      msg.phrase = {
        title: newPhraseTitle,
        token: {
          signature: srcControl.phraseToken.signature,
          uuid: newPhraseUUID,
          type: 'tree',
          source: {
            type: 'file',
            filename: assemblyOpts.filename
          }
        }
      };
      return next();
    }, function(reject) {
      console.log({
        REJECT: reject
      });
      return next();
    });
  };
};
