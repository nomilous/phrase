// Generated by CoffeeScript 1.6.3
var Notice, PhraseNode, PhraseTree, TreeWalker;

Notice = require('notice');

PhraseNode = require('../phrase/node');

PhraseTree = require('../phrase/tree');

TreeWalker = require('../recursor/tree_walker');

module.exports.create = function(core) {
  var util;
  util = core.util;
  return core.assembler = function(msg, next) {
    var assemblyOpts, error, newPhraseControl, newPhraseFn, newPhraseTitle, newPhraseUUID, newRoot, opts, srcControl, srcPhrase, srcRoot;
    try {
      console.log(msg.context.title, {
        UUID: msg.root.uuid
      });
    } catch (_error) {
      error = _error;
      console.log(msg.context.title);
    }
    if (msg.context.title === 'boundry::edge:create') {
      srcPhrase = msg.vertices[0];
      srcControl = msg.control;
      srcRoot = msg.root;
      newPhraseTitle = msg.vertices[1].phrase.title;
      newPhraseControl = msg.vertices[1].phrase.control;
      newPhraseUUID = msg.vertices[1].phrase.control.uuid || util.uuid();
      newPhraseFn = msg.vertices[1].phrase.fn;
      assemblyOpts = msg.vertices[1].opts;
      newRoot = core.root(newPhraseUUID);
      newRoot.context = {};
      newRoot.context.notice = Notice.create(newPhraseUUID);
      newRoot.context.PhraseTree = PhraseTree.createClass(newRoot);
      newRoot.context.PhraseNode = PhraseNode.createClass(newRoot);
      opts = {
        leaf: newPhraseControl.leaf || srcControl.leaf,
        boundry: newPhraseControl.boundry || srcControl.boundry,
        timeout: newPhraseControl.timeout || srcControl.timeout
      };
      newRoot.context.notice.use(function(msg, next) {
        if (msg.context.title === 'phrase::recurse:end') {
          console.log({
            TOKENS: msg.tokens
          });
          console.log({
            CONTEXT: newRoot.context
          });
        }
        return next();
      });
      TreeWalker.walk(newRoot, opts, newPhraseTitle, newPhraseFn).then(function(resolve) {}, function(reject) {
        return console.log({
          REJECT: reject
        });
      }, function(notify) {
        return console.log({
          NOTIFY: notify
        });
      });
    }
    return next();
  };
};
