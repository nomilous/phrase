// Generated by CoffeeScript 1.6.3
var v1;

v1 = require('node-uuid').v1;

exports.createClass = function(root) {
  var PhraseNode;
  return PhraseNode = (function() {
    var PhraseHook, PhraseHooks, PhraseToken;

    PhraseToken = (function() {
      function PhraseToken(opts) {
        var localOpts, property, _fn, _i, _len, _ref,
          _this = this;
        if (opts == null) {
          opts = {};
        }
        localOpts = {};
        _ref = ['name'];
        _fn = function(property) {
          localOpts[property] = opts[property];
          return Object.defineProperty(_this, property, {
            get: function() {
              return localOpts[property];
            },
            enumerable: true
          });
        };
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          property = _ref[_i];
          _fn(property);
        }
      }

      return PhraseToken;

    })();

    PhraseHook = (function() {
      function PhraseHook() {}

      return PhraseHook;

    })();

    PhraseHooks = (function() {
      function PhraseHooks(opts) {
        var localOpts, property, _fn, _i, _len, _ref,
          _this = this;
        if (opts == null) {
          opts = {};
        }
        localOpts = {};
        _ref = ['beforeAll', 'beforeEach', 'afterEach', 'afterAll'];
        _fn = function(property) {
          localOpts[property] = opts[property];
          return Object.defineProperty(_this, property, {
            get: function() {
              return localOpts[property];
            },
            enumerable: true
          });
        };
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          property = _ref[_i];
          _fn(property);
        }
      }

      return PhraseHooks;

    })();

    function PhraseNode(opts) {
      var localOpts, property, _fn, _fn1, _i, _j, _len, _len1, _ref, _ref1,
        _this = this;
      if (opts == null) {
        opts = {};
      }
      localOpts = {
        uuid: opts.uuid || v1(),
        token: new PhraseToken(opts.token),
        text: opts.text,
        leaf: opts.leaf,
        fn: opts.fn,
        timeout: opts.timeout || 2000,
        hooks: new PhraseHooks(opts.hooks),
        deferral: opts.deferral,
        queue: opts.queue
      };
      _ref = ['uuid', 'token', 'text'];
      _fn = function(property) {
        return Object.defineProperty(_this, property, {
          get: function() {
            return localOpts[property];
          },
          enumerable: true
        });
      };
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        property = _ref[_i];
        _fn(property);
      }
      _ref1 = ['fn', 'timeout', 'hooks', 'deferral', 'queue'];
      _fn1 = function(property) {
        return Object.defineProperty(_this, property, {
          get: function() {
            return localOpts[property];
          },
          enumerable: false
        });
      };
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        property = _ref1[_j];
        _fn1(property);
      }
      Object.defineProperty(this, 'leaf', {
        enumerable: true,
        get: function() {
          return localOpts.leaf;
        },
        set: function(value) {
          if (localOpts.leaf != null) {
            return;
          }
          return localOpts.leaf = value;
        }
      });
    }

    return PhraseNode;

  })();
};
